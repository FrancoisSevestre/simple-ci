* TODO
- [-] Create a pip package
- [-] move functions to module file
- [-] Include packaging in pipeline
- [ ] Write a proper pipeline
- [ ] Format simple-ci.log
- [ ] Implement cron
- [ ] Conditionnals
- [ ] Assert functions are pure.
- [ ] Include unit tests
- [ ] secrets
- [ ] Config file: cmd interpreter, docker ,etc
- [ ] Find other keywords
- [ ] Check file existence in start delete and init
- [ ] Run jobs concomitantly

* DONE
- basics:
-- [x] Choose language (->python)
-- [x] handle arguments
-- [x] Create symlinc to /usr/bin
-- [x] create a basic script and hook
-- [x] Use yq for yaml parsing
-- [x] Refine parsing process
-- [x] handle creation of the basic exemple
-- [x] Mesure execution time
-- [x] Create "clean" command
-- [x] Update README
-- [x] Add precisions to wiki (use bash and sh in docker)
-- [x] Check use of subprocess.getoutput vs os.system (subprocess.run)
-- [x] Add specify pipeline file + create test pipelines (every possible case)
-- [x] refactor script execution
-- [x] Artifacts folder
-- [x] Sandbox folder (change work dir)
-- [x] Change sandbox folder to tmp
-- [x] Artifacts as keyword
-- [x] tuple for scrit params
-- [x] Get success status of every command
-- [x] Change hook from post to pre
-- [x] Create Exceptions and raise errors
--- file doesn't exist
--- Command returned error
--- Container isn't running
--- bad syntax (no jobs, no script)

- Wiki:
-- [x] Find how to make a wiki
-- [x] define the structure
-- [x] Write basis and beginner tuto
-- [x] Roadmap
-- [x] Update wiki

-- Implement keywords:
--- [x] script
--- [x] jobs
--- [x] stages
--- [x] variables
--- [x] inside_docker
--- [x] artifacts

