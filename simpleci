#! /bin/python3
"""
SIMPLE CI: Dead simple CI/CD pipeline executor.
author: FranÃ§ois Sevestre
email: francois.sevestre.35@gmail.com
"""

############## Imports   ##############
import sys
import os
import subprocess
import yaml

############## Functions ##############
def get_root_dir():
    """ Get the root directory of the git repo.
    Returns:
        An absolute path.
    """
    return subprocess.getoutput("git rev-parse --show-toplevel")

def get_git_branch():
    """ Get the current git branch.
    Returns:
        A string, the name of the branch.
    """
    return subprocess.getoutput("git branch | grep '*' | awk '{print $2}'")

def manage_hook(git_root_dir, present=True):
    """ Creates or remove the hook from the .git/hook/ folder.

    Args:
        present (bool): True -> create, False -> remove
    Returns:
        A bool.
    Raises:
        FileExistsError: The file already exists, can't be created.
        FileNotFoundError: The file doesn't exists, can't delete.
    """

    # Git hook script
    post_commit_hook = """
    #!/bin/env bash

    simpleci exec
    """
    # manage hook
    if present:                                             # Create the hook file
        with open(git_root_dir+"/.git/hooks/post-commit", 'w', encoding="utf-8") as file:
            file.write(post_commit_hook)
        os.chmod(git_root_dir+"/.git/hooks/post-commit", 0o755)
        print("Git hook created.                                 \
            \nIt will execute the pipeline after the next commit.\
            \nAlternatively, you can trigger the pipeline with \'simple-ci exec\'")
    else:
        os.remove(git_root_dir+"/.git/hooks/post-commit")   # Remove the hook file
    return True

def create_example_file(git_root_dir):
    """
    Creates an example .simple-ci.yml file at the git root dir if it doesn't exists
    """
    # Example
    example_file_data = \
"""---
variables:
  GLOBAL_VAR: "last"

stages:
  - stage1
  - stage2

stage1:
  variables:
    MYVAR: "second"
  jobs:
    - job1
    - job2

stage2:
  inside_docker:
    image: ruby:2.7
    path: /tmp/
  jobs:
    - job3

job1:
  script:
    - echo "This is the first job."

job2:
  inside_docker:
    image: ruby:2.7
    path: /tmp/
  script:
    - echo "This is the $MYVAR job."

job3:
    script:
    - echo "This is the $GLOBAL_VAR job, that will be executed after stage1 is completed."
"""
    # check if file exists
    if os.path.isfile(git_root_dir+"/.simple-ci.yml"):
        print("File exists: Example creation skipped.")
    else:
        # create file
        with open(git_root_dir+"/.simple-ci.yml", 'w', encoding="utf-8") as file:
            file.write(example_file_data)
        print("The .simple-ci.yml file has been created. Check it, try it and customize it!")

def get_pipeline_data(git_root_dir):
    """ Get the pipeline data from file.
    Returns:
        A dict.
    """
    yaml_data = False
    with open(git_root_dir+"/.simple-ci.yml", 'r', encoding="utf-8") as file:
        yaml_data = yaml.load(file, Loader=yaml.Loader)
    return yaml_data
    # TODO check if file exists (.simple-ci.yml or .simple-ci/*)

def log(line, color=False):
    """ Prints line and saves it to simple.log file
    Args:
        line (str)
        color (bool)
    """
    # TODO insert timestamp
    with open("simple.log", 'a', encoding="utf-8") as log_file:
        log_file.write(line+"\n")
    if color:
        print("\033[32m"+line+"\033[0m")
    else:
        print(line)

def exec_script_command(script_command, env):
    """  Execute a command with a given env
    Args:
        command (str)
        env (dict)
    """
    env_cmd = "true"

    for var_key in env:                                         # Add env variables declaration
        env_cmd = env_cmd + \
                " && " +    \
                var_key + "=\"" + str(env[var_key]) + "\""

    passed_command = "bash -c \'" + \
            env_cmd +               \
            " && " +                \
            script_command +        \
            "\'"                                                # Assemble final command

    log(str(subprocess.getoutput(passed_command)))              # Exec and log

def create_container(docker_image):
    """
    Creates a docker container of the specified image.
    Returns:
        container_hash (str)
    """
    cont = subprocess.getoutput("docker run -td " + docker_image) # Create container
    cont = cont.split(sep='\n')[-1][0:11]
    # os.system("docker container start " + cont + " > /dev/null")          # start container
    return cont

def exec_script_command_in_docker(script_command, env, cont_id):
    """
    Execute a command with the given env in the given container.
    """
    env_cmd = "true"

    for var_key in env:                                         # Add env variables declaration
        env_cmd = env_cmd + \
                " && " +    \
                var_key + "=\"" + str(env[var_key]) + "\""

    passed_command = "sh -c \'" + \
            env_cmd +             \
            " && " +              \
            script_command +      \
            "\'"                                                # Assemble final command
    full_command = "docker exec " + cont_id + " " + passed_command+ " \n"
    print(full_command)
    log(str(subprocess.getoutput(full_command)))

def copy_files_to_docker(cont_id, path):
    """
    Copies the current git folder to container at the given path.
    """
    log(f"Files will be copied to the container {cont_id} at \'{path}\'")
    # os.system(f"cp -r . {get_root_dir()}_simple-ci/" )
    os.system(f"docker cp . {cont_id}:{path}")

def stop_container(cont_id):
    """
    Stops a docker container.
    """
    os.system("docker rm -f " + cont_id + " > /dev/null")

############## Main ##############
if __name__ == '__main__':
    args = sys.argv
    script_name = args.pop(0)                       # Remove script name from the list
    SELECTOR = args[0]

    if SELECTOR == "start":
        sys.exit(manage_hook(get_root_dir()))       # Create the hook file

    elif SELECTOR == "stop":
        sys.exit(manage_hook(get_root_dir(), False))# Delete the hook file

    elif SELECTOR == "init":
        create_example_file(get_root_dir())         # Create the .simple-ci.yml file
        sys.exit(manage_hook(get_root_dir()))       # start

    elif SELECTOR == "exec":                        # Execution of the .simple-ci.yml script

        ### Global scope ###
        data = get_pipeline_data(get_root_dir())    # Collect data from script

        # Variables
        if 'variables' in data:                     # if user declared variables in global scope
            global_env = data['variables']
        else:
            global_env = {}

        # Inside docker                             # if user declared a docker (global scope)
        if 'inside_docker' in data:
            global_docker = data['inside_docker']
        else:
            global_docker = {}

        # stages
        if 'stages' in data:                        # if user declared stages in global scope
            for stage in data['stages']:
                log("###### Stage \'" + str(stage) + "\' ######\n", True)

                ### Stage scope ###
                stage = data[stage]                 # get data from stage

                # variables
                if 'variables' in stage:            # if user declared variables in the stage scope
                    stage_env = global_env | stage['variables'] # merge dicts with overwrite
                else:
                    stage_env = global_env

                # Inside docker
                if 'inside_docker' in stage:        # if user declared variables in the stage scope
                    stage_docker = global_docker | stage['inside_docker']# merge dicts + overwrite
                else:
                    stage_docker = global_docker

                # Jobs
                if 'jobs' in stage:                 # Check if user declared jobs in this stage
                    for job in stage['jobs']:
                        log("#### Job \'" + str(job) + "\' ####", True)

                        ### Job scope ###
                        job = data[job]             # get data from job

                        # variables
                        if 'variables' in job:      # if user declared variables in the job scope
                            job_env = stage_env | job['variables']
                        else:
                            job_env = stage_env

                        # Inside docker             # if user declared a docker option (job scope)
                        if 'inside_docker' in job:  # if user declared variables in the job scope
                            job_docker = stage_docker | job['inside_docker']
                        else:
                            job_docker = stage_docker

                        # Script
                        if job_docker != {}:
                            log(f"A \'{job_docker['image']}\' container is required.")
                            container_id = create_container(job_docker['image'])
                            copy_files_to_docker(container_id, job_docker['path'])
                            log(f"Container \'{container_id}\' as been created.")
                            if 'script' in job:         # Check if user defined script in this job
                                script = job['script']
                                for command in script:
                                    log("## > " + str(command), True)
                                    exec_script_command_in_docker(command, job_env, container_id)
                            else:
                                print("No script found for the job") # TODO raise an error
                            stop_container(container_id)

                        else:
                            if 'script' in job:         # Check if user defined script in this job
                                script = job['script']
                                for command in script:
                                    log("## > " + str(command), True)
                                    exec_script_command(command, job_env)
                            else:
                                print("No script found for the job") # TODO raise an error
                else:
                    print("No jobs found fo this stage.") # TODO raise an error

        # Jobs
        else:
            if 'jobs' in data:                      # if user declared jobs in global scope
                for job in data['jobs']:
                    log("#### Job \'" + str(job) + "\' ####", True)

                    ### Job scope ###
                    job = data[job]

                    # variables                     # if user declared variables in the job scope
                    if 'variables' in job:
                        job_env = global_env | job['variables']
                    else:
                        job_env = global_env

                    # Inside docker                 # if user declared a docker option (job scope)
                    if 'inside_docker' in job:  # if user declared variables in the job scope
                        job_docker = global_docker | job['inside_docker']
                    else:
                        job_docker = global_docker

                    # Script
                    if job_docker != {}:
                        log(f"A \'{job_docker['image']}\' container is required.")
                        container_id = create_container(job_docker['image'])
                        copy_files_to_docker(container_id, job_docker['path'])
                        log(f"Container \'{container_id}\' as been created.")
                        if 'script' in job:         # Check if user defined script in this job
                            script = job['script']
                            for command in script:
                                log("## > " + str(command), True)
                                exec_script_command_in_docker(command, job_env, container_id)
                        else:
                            print("No script found for the job") # TODO raise an error
                        stop_container(container_id)

                    else:
                        if 'script' in job:             # Check if user defined script in this job
                            script = job['script']
                            for command in script:
                                log("## > " + str(command), True)
                                exec_script_command(command, job_env)
                        else:
                            print("No script found for the job") # TODO raise an error
                            sys.exit(1)

        # Script
            else:
                if global_docker != {}:
                    log(f"A \'{global_docker['image']}\' container is required.")
                    container_id = create_container(global_docker['image'])
                    copy_files_to_docker(container_id, global_docker['path'])
                    log(f"Container \'{container_id}\' as been created.")
                    if 'script' in data:            # Check if user defined script (global scope)
                        script = data['script']
                        for command in script:
                            log("## > " + str(command), True)
                            exec_script_command_in_docker(command, global_env, container_id)
                    else:
                        print("No script found") # TODO raise an error
                    stop_container(container_id)

                else:
                    if 'script' in data:            # Check if user defined script (global scope)
                        script = data['script']
                        for command in script:
                            log("## > " + str(command), True)
                            exec_script_command(command, global_env)
                    else:
                        print("No script found") # TODO raise an error
                        sys.exit(1)

    elif SELECTOR == "cron":
        # TODO Create cron job
        pass

    elif SELECTOR == "test":
        # For dev purpose only
        pass

    else:
        print("Wrong argument")
        sys.exit(1)
